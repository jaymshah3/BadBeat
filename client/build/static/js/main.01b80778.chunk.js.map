{"version":3,"sources":["js/utils/input-validators.js","js/utils/mapStateToProps.js","Home.js","JoinDialog.js","RaiseDialog.js","InGameDashboard.js","ChatComponent.js","PreGameDashboard.js","App.js","js/actions/index.js","js/constants/action-types.js","serviceWorker.js","js/reducers/index.js","index.js"],"names":["isInvalidNum","data","isNaN","parseInt","isUnsanitized","mapStateToProps","state","socket","ConnectedHome","props","handleUsernameChange","e","setState","username","target","value","usernameError","handleBankChange","bank","bankError","handleSmallBlindChange","smallBlind","smallBlindError","handleBigBlindChange","bigBlind","bigBlindError","owner","this","on","room","to","pathname","isOwner","TextField","onChange","id","label","variant","Button","type","disabled","isError","onClick","createGame","emit","small_blind","big_blind","Component","Home","connect","ConnectedJoinDialog","onClose","open","Dialog","handleClose","DialogTitle","helperText","error","join","isDisabled","JoinDialog","ConnectedRaiseDialog","console","log","amount","minBet","prevProps","_","maxBet","currentContribution","Slider","max","Math","min","v","handleAmountChange","step","handleAmountTextChange","isInvalidAmount","raise","RaiseDialog","ConnectedInGameDashboard","newList","map","x","latestAction","communityCards","pot","highestCurrentContribution","JSON","stringify","personalCards","options","currentPlayers","showRaiseDialog","winnings","winners","defineHandlers","currentHand","result","i","length","newObj","push","resultObj","resetState","List","ListItem","key","cardsString","action","doAction","getMyCurrentContribution","fold","call","getMyCurrentBank","element","ListItemText","Divider","showWinOrLoss","showButtonForAction","showCurrentHand","InGameDashboard","ConnectedChatComponent","MAX_MESSAGES","messages","message","concat","slice","preventDefault","renderMessage","onSubmit","onFormSubmit","Input","handleMessageChange","ChatComponent","ConnectedPreGameDashboard","handleRequest","decision","match","params","request_sid","approve","joinRequests","filter","showJoinDialog","isRequested","isJoined","location","initialLoad","joinedPlayers","startGame","currState","loadUsers","color","joinGame","preGame","showStartButton","showJoinButton","showRequests","showJoinedPlayers","show","players","showChatRoom","PreGameDashboard","ConnectedApp","io","transports","setSocket","path","render","App","dispatch","payload","Boolean","window","hostname","initialState","undefined","rootReducer","Object","assign","store","createStore","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.01b80778.chunk.js","sourcesContent":["export function isInvalidNum(data) {\n    return isNaN(data) || data == '' || parseInt(data) < 0;\n}\n\nexport function isUnsanitized(data) {\n    return data == \"\";\n}","const mapStateToProps = state => {\n    return {\n        socket: state.socket,\n    };\n}\n\nexport default mapStateToProps;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { TextField, Button } from '@material-ui/core';\nimport { Redirect } from 'react-router-dom';\nimport { isUnsanitized, isInvalidNum } from './js/utils/input-validators';\nimport mapStateToProps from './js/utils/mapStateToProps';\n\n\nclass ConnectedHome extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            bank: '',\n            smallBlind: '',\n            bigBlind: '',\n            usernameError: true,\n            bankError: true,\n            smallBlindError: true,\n            bigBlindError: true,\n            owner: null\n        }\n    }\n\n    componentDidMount() {\n        const { socket } = this.props;\n\n        socket.on('owner',(data) => {\n            this.setState({\n                owner: data.room            \n            });\n        });\n    }\n\n    handleUsernameChange = (e) => {\n        this.setState({\n            username: e.target.value,\n            usernameError: isUnsanitized(e.target.value)\n        });\n    }\n\n    handleBankChange = (e) => {\n        this.setState({\n            bank: e.target.value,\n            bankError: isInvalidNum(e.target.value)\n        });\n    }\n\n    handleSmallBlindChange = (e) => {\n        this.setState({\n            smallBlind: e.target.value,\n            smallBlindError: isInvalidNum(e.target.value)\n        });\n    }\n\n    handleBigBlindChange = (e) => {\n        this.setState({\n            bigBlind: e.target.value,\n            bigBlindError: isInvalidNum(e.target.value)\n        });\n    }\n\n    isError() {\n        const { usernameError, bankError, smallBlindError, bigBlindError } = this.state;\n\n        return (usernameError || bankError || smallBlindError || bigBlindError);\n    }\n\n    render() {\n        const { username, bank, smallBlind, bigBlind, owner } = this.state;\n\n        if (owner) {\n            return <Redirect \n                to={{\n                    pathname: \"/\"+owner,\n                    state: { \n                        isOwner: true,\n                        username: username,\n                        bank: bank \n                    }\n                }}\n            />\n        }\n\n        const createGameView = (\n            <div>\n                <TextField \n                    value={username} \n                    onChange={this.handleUsernameChange} \n                    id=\"outlined-basic\" \n                    label=\"Username\" \n                    variant=\"outlined\" \n                />\n                <TextField \n                    value={bank} \n                    onChange={this.handleBankChange} \n                    id=\"outlined-basic\" \n                    label=\"Bank\" \n                    variant=\"outlined\" \n                />\n                <TextField \n                    value={smallBlind} \n                    onChange={this.handleSmallBlindChange} \n                    id=\"outlined-basic\" \n                    label=\"Small Blind\" \n                    variant=\"outlined\" \n                />\n                <TextField \n                    value={bigBlind} \n                    onChange={this.handleBigBlindChange} \n                    id=\"outlined-basic\" \n                    label=\"Big Blind\" \n                    variant=\"outlined\" \n                />\n                <Button \n                    variant=\"contained\" \n                    type=\"submit\" \n                    disabled={this.isError()} \n                    onClick={() => this.createGame()}\n                >Create Game</Button>\n\n            </div>\n        )\n                \n        return createGameView;\n    }\n\n    createGame() {\n        const { username, bank, smallBlind, bigBlind } = this.state;\n        const { socket } = this.props;\n        socket.emit('create room', {\n            username: username,\n            bank: parseInt(bank),\n            small_blind: parseInt(smallBlind),\n            big_blind: parseInt(bigBlind)\n        });\n    }\n}\n\nconst Home = connect(mapStateToProps)(ConnectedHome);\n\nexport default Home;","import React, { Component } from 'react';\nimport { TextField, Dialog, DialogTitle, Button } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { isInvalidNum, isUnsanitized } from './js/utils/input-validators';\nimport mapStateToProps from './js/utils/mapStateToProps';\n\n\nclass ConnectedJoinDialog extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: '',\n            bank: '',\n        }\n    }\n\n    handleUsernameChange(e) {\n        this.setState({\n            username: e.target.value\n        });\n    }\n\n    handleBankChange(e) {\n        this.setState({\n            bank: e.target.value\n        })\n    }\n\n    handleClose() {\n        const { onClose } = this.props;\n\n        onClose(false);\n    }\n\n    join() {\n        const { socket, room, onClose } = this.props;\n\n        const { bank, username } = this.state;\n        socket.emit('request to join', {\n            username: username,\n            room: room,\n            bank: parseInt(bank)\n        });\n        onClose(true, username, bank);\n    }\n\n    isDisabled() {\n        const { bank, username } = this.state;\n        return (isInvalidNum(bank) || isUnsanitized(username));\n    }\n\n    render() {\n        const { username, bank, usernameError } = this.state;\n        const { open } = this.props\n\n        return <Dialog onClose={() => this.handleClose()} open={open}>\n        <DialogTitle>Join Game</DialogTitle>\n        <TextField \n            label=\"Username\" \n            value={username} \n            onChange={(e) => this.handleUsernameChange(e)}\n            helperText={usernameError ? \"Username already exists. \" : \"\"}\n            error={usernameError}\n        />\n        <TextField \n            label=\"Bank\" \n            value={bank} \n            onChange={(e) => this.handleBankChange(e)}\n        />\n        <Button onClick={() => this.join()} disabled={this.isDisabled()}>Join</Button>\n    </Dialog>\n    }\n}\n\nconst JoinDialog = connect(mapStateToProps)(ConnectedJoinDialog);\n\nexport default JoinDialog;","import React, { Component } from 'react';\nimport { Dialog, DialogTitle, Button, Slider, TextField } from '@material-ui/core';\nimport { bool, number, string, func, any } from 'prop-types';\nimport { connect } from 'react-redux';\nimport mapStateToProps from './js/utils/mapStateToProps';\n\nclass ConnectedRaiseDialog extends Component {\n    constructor(props) {\n        super(props);\n        console.log(props);\n        this.state = {\n            amount: props.minBet\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.minBet == this.props.minBet) {\n            return;\n        }\n\n        this.setState({\n            amount: this.props.minBet\n        });\n    }\n\n    handleAmountChange(_, value) {\n        this.setState({\n            amount: value\n        });\n    }\n\n    handleAmountTextChange(e) {\n        this.setState({\n            amount: e.target.value\n        });\n    }\n\n    raise() {\n        const { socket, onClose, username, room } = this.props;\n        const { amount } = this.state;\n\n        socket.emit('raise', {\n            username: username,\n            amount: parseInt(amount),\n            room: room\n        });\n        onClose(true);\n    }\n\n    handleClose() {\n        const { onClose } = this.props;\n        onClose(false);\n    }\n\n    isInvalidAmount() {\n        const { amount } = this.state;\n        const { minBet, maxBet } = this.props;\n        return (amount < minBet || amount > maxBet);\n    }\n\n\n    render() {  \n        const { bank, open, currentContribution, minBet, maxBet } = this.props;\n        const { amount } = this.state;\n\n        return <Dialog onClose={() => this.handleClose()} open={open}>\n            <DialogTitle>How much do you want to raise to?</DialogTitle>\n            <p>Your bank is {bank}. You've already contributed {currentContribution}. </p>\n            <Slider\n                value={amount}\n                max={Math.min(maxBet, bank)}\n                min={minBet}\n                onChange={(e, v) => this.handleAmountChange(e, v)}\n                step={1}\n            />\n            <TextField \n                label=\"Amount\" \n                value={amount} \n                onChange={(e) => this.handleAmountTextChange(e)}\n                // helperText={usernameError ? \"Username already exists. \" : \"\"}\n                error={this.isInvalidAmount()}\n            />\n            <Button onClick={() => this.raise()} disabled={isNaN(amount) || amount == ''}>Done</Button>\n        </Dialog>\n    }\n}\n\n// RaiseDialog.propTypes = {\n//     bank: number,\n//     open: bool,\n//     username: string,\n//     onClose: func,\n//     socket: any,\n//     currentContribution: number,\n//     room: string\n// }\n\nconst RaiseDialog = connect(mapStateToProps)(ConnectedRaiseDialog);\n\nexport default RaiseDialog;","import React, { Component } from 'react';\nimport { List, ListItem, Button, Divider, ListItemText } from '@material-ui/core';\nimport { any, number, string } from 'prop-types';\nimport { connect } from 'react-redux';\nimport RaiseDialog from './RaiseDialog.js';\nimport mapStateToProps from './js/utils/mapStateToProps';\n\nclass ConnectedInGameDashboard extends Component {\n    constructor(props) {\n        super(props);\n\n        const players = props['players'];\n        const newList = players.map(x => {\n            return {\n                username: x['username'], \n                bank: x['bank'], \n                latestAction: '',\n                currentContribution: 0\n            }\n        });\n        let communityCards = [];\n        let pot = 0;\n        let highestCurrentContribution = 0;\n        if (props['currState']) {\n            communityCards = props['currState']['communityCards'];\n            pot = props['currState']['pot'];\n            highestCurrentContribution = props['currState']['highestCurrentContribution'];\n        }\n        console.log(\"beginning: \" + JSON.stringify(newList))\n        this.state = {\n            personalCards: [],\n            communityCards: communityCards,\n            options: [],\n            highestCurrentContribution: highestCurrentContribution,\n            currentPlayers: newList,\n            pot: pot,\n            showRaiseDialog: false,\n            winnings: 0,\n            winners: [],\n            maxBet: 0,\n            minBet: 0\n        }\n    }\n\n    componentDidMount() {\n        this.defineHandlers();\n    }\n\n    resetState() {\n        this.setState({\n            personalCards: [],\n            communityCards: [],\n            options: [],\n            highestCurrentContribution: 0,\n            pot: 0,\n            showRaiseDialog: false,\n            currentHand: null,\n            winners: [],\n            winnings: 0\n        });\n    }\n\n    defineHandlers() {\n        const { socket, username } = this.props;\n\n        socket.on('dealt cards', (data) => {\n            this.setState({\n                personalCards: data['cards'],\n                result: '',\n                winnings: 0\n            });\n        });\n\n        socket.on('options for player', (data) => {\n            this.setState({\n                options: data['options'], \n                highestCurrentContribution: data['highest_contribution'],\n                maxBet: data['max_bet'],\n                minBet: data['min_bet']\n            });\n        });\n\n        socket.on('highest contribution', (data) => {\n            this.setState({\n                highestCurrentContribution: data['highest_contribution']\n            });\n        });\n\n        socket.on('player action', (data) => {\n            this.setState(state => {\n                const newList = []\n                const currentPlayers = state['currentPlayers'];\n                for (let i = 0; i < currentPlayers.length; i++) {\n                    let newObj = {};\n                    if (currentPlayers[i]['username'] == data['username']) {\n                        newObj['username'] = currentPlayers[i]['username'];\n                        newObj['latestAction'] = data['action'];\n                        newObj['currentContribution'] = data['currentContribution'];\n                        newObj['bank'] = currentPlayers[i]['bank']\n                    } else {\n                        newObj = currentPlayers[i];\n                    }\n                    newList.push(newObj);\n                }\n                return {\n                    currentPlayers: newList\n                }\n            });\n        });\n\n        socket.on('withdraw', (data) => {\n            this.setState(state => {\n                const newList = []\n                const currentPlayers = state['currentPlayers'];\n                for (let i = 0; i < currentPlayers.length; i++) {\n                    let newObj = {};\n                    if (currentPlayers[i]['username'] == data['username']) {\n                        newObj['username'] = currentPlayers[i]['username'];\n                        newObj['latestAction'] = currentPlayers[i]['action'];\n                        newObj['currentContribution'] = currentPlayers[i]['currentContribution'];\n                        newObj['bank'] = currentPlayers[i]['bank'] - data['amount']\n                    } else {\n                        newObj = currentPlayers[i];\n                    }\n                    newList.push(newObj);\n                }\n                console.log(newList)\n                return {\n                    currentPlayers: newList\n                }\n            });\n        });\n\n        socket.on('pot update', (data) => {\n            this.setState({pot: data['pot']});\n        });\n\n        socket.on('community cards', (data) => {\n            this.setState({communityCards: data['community_cards']});\n        });\n\n        socket.on('reset current contribution', (data) => {\n            this.setState(state => {\n                const newList = []\n                const currentPlayers = state['currentPlayers'];\n                for (let i = 0; i < currentPlayers.length; i++) {\n                    let newObj = {};\n                    newObj['username'] = currentPlayers[i]['username'];\n                    newObj['latestAction'] = '';\n                    newObj['currentContribution'] = 0;\n                    newObj['bank'] = currentPlayers[i]['bank']\n                    \n                    newList.push(newObj);\n                }\n                return {\n                    currentPlayers: newList,\n                }\n            });\n        });\n\n        socket.on('current hand', (data) => {\n            this.setState({currentHand: data});\n        });\n\n        socket.on('best hand', (data) => {\n            this.setState({currentHand: data});\n        });\n\n        socket.on('result', (data) => {\n            console.log(data)\n            this.setState(state => {\n                const newList = []\n                let winners = []\n                let winnings = 0;\n                const currentPlayers = state['currentPlayers'];\n                for (let i = 0; i < currentPlayers.length; i++) {\n                    let newObj = {};\n                    const resultObj = data[currentPlayers[i]['username']]\n                    console.log(\"resultObj\")\n                    console.log(resultObj)\n                    newObj['username'] = currentPlayers[i]['username'];\n                    newObj['latestAction'] = currentPlayers[i]['action'];\n                    newObj['currentContribution'] = currentPlayers[i]['currentContribution'];\n                    newObj['bank'] = resultObj['final_bank']\n                    if (username == currentPlayers[i]['username']) {\n                        winnings = resultObj['winnings']\n                    }\n                    if (resultObj['winnings'] > 0) {\n                        winners.push(resultObj);\n                    }\n                    console.log(\"newObj\")\n                    console.log(newObj)\n                    newList.push(newObj);\n                }\n                console.log(\"newList\")\n                console.log(newList)\n                return {\n                    currentPlayers: newList,\n                    winners: winners,\n                    winnings: winnings\n                }\n            }, () => {console.log(this.state)});\n        });\n\n        socket.on('new game', () => {\n            this.resetState();\n        });\n    }\n\n    getMyCurrentContribution() {\n        const { currentPlayers } = this.state;\n        const { username } = this.props;\n\n        for (let i = 0; i < currentPlayers.length; i++) {\n            if (currentPlayers[i]['username'] == username) {\n                return currentPlayers[i]['currentContribution'];\n            }\n        }\n    }\n\n    getMyCurrentBank() {\n        const { currentPlayers } = this.state;\n        const { username } = this.props;\n\n        for (let i = 0; i < currentPlayers.length; i++) {\n            if (currentPlayers[i]['username'] == username) {\n                return currentPlayers[i]['bank'];\n            }\n        }\n    }\n\n    showWinOrLoss() {\n        const { winners } = this.state;\n        if (winners.length == 0) {\n            return null;\n        } else {\n            return <List>\n                        {winners.map(x => <ListItem key={x['username']}>\n                            <p>{x['username'] + ' ' + x['winnings'] + ' ' + x['hand'][0]['value'] + \" of \" + x['hand'][0]['suit'] + ', ' + x['hand'][1]['value'] + \" of \" + x['hand'][1]['suit']}</p>\n                        </ListItem>)}\n                    </List>\n                    \n        }\n    }\n\n    showCurrentHand() {\n        const { currentHand } = this.state;\n        if (currentHand == null) {\n            return null;\n        } else {\n            let cardsString = '';\n            for (let i = 0; i < currentHand['cards'].length; i++) {\n                cardsString += currentHand['cards'][i]['value'] + \" of \" + currentHand['cards'][i]['suit']\n                cardsString += \", \"\n            }\n            return <h3>Your best hand is {currentHand['major_group']} with cards {cardsString}</h3>\n        }\n    }\n\n    showButtonForAction(action) {\n        const { highestCurrentContribution } = this.state;\n\n        if (action == 'fold') {\n            return <Button onClick={() => this.doAction('fold')}>Fold</Button>\n        } else if (action == 'raise') {\n            return <Button onClick={() => this.doAction('raise')}>Raise</Button>\n        } else if (action == 'call') {\n            return <Button onClick={() => this.doAction('call')}>Call for {highestCurrentContribution - this.getMyCurrentContribution()}</Button>\n        } else if (action =='check') {\n            return <Button onClick={() => this.doAction('check')}>Check</Button>\n        } else if (action == 'bet') {\n            return <Button onClick={() => this.doAction('raise')}>Bet</Button>\n        }\n    }\n\n    doAction(action) {\n        if (action == 'fold') {\n            this.fold();\n        } else if (action == 'call' || action == 'check') {\n            this.call();\n        } else {\n            this.setState({showRaiseDialog: true})\n        }\n    }\n\n    handleClose(value) {\n        this.setState({showRaiseDialog: false});\n        if (value) {\n            this.setState({options: []});\n        }\n    }\n\n    fold() {\n        const { socket, username, room } = this.props;\n\n        socket.emit('fold', {username: username, room: room});\n        this.setState({options: []});\n    }\n\n    call() {\n        const { socket, username, room } = this.props;\n        const { highestCurrentContribution } = this.state;\n        const currentContribution = this.getMyCurrentContribution()\n\n        console.log(username);\n\n        socket.emit('call', {\n            username: username, \n            amount: highestCurrentContribution-currentContribution,\n            room: room\n        });\n        this.setState({options: []});\n    }\n\n    render() {\n        const { \n            currentPlayers, \n            options, \n            highestCurrentContribution,\n            showRaiseDialog,\n            personalCards,\n            communityCards,\n            pot,\n            minBet,\n            maxBet \n        } = this.state;\n        const { username, socket, room } = this.props;\n        const bank = this.getMyCurrentBank()\n        const currentContribution = this.getMyCurrentContribution();\n\n        return <div>\n            <List>\n                {\n                    currentPlayers.map((element) => {\n                        return <ListItem key={element['username']}>\n                            <div>\n                                <ListItemText>{element['username']}</ListItemText>\n                                <ListItemText>{element['bank']}</ListItemText>\n                            </div>\n                        </ListItem>\n                    })\n                }\n            </List>\n            <Divider />\n            {this.showWinOrLoss()}\n            <h3>Your cards</h3>\n            <List>\n                {\n                    personalCards.map((element) => {\n                        return <ListItem key={element['value'] + element['suit']}>\n                            <ListItemText>{element['value']} of {element['suit']}</ListItemText>\n                        </ListItem>\n                    })\n                }\n            </List>\n            <Divider />\n            <h3>Community cards</h3>\n            <List>\n                {\n                    communityCards.map((element) => {\n                        return <ListItem key={element['value'] + element['suit']}>\n                            <ListItemText>{element['value']} of {element['suit']}</ListItemText>\n                        </ListItem>\n                    })\n                }\n            </List>\n            <Divider />\n            <List>\n                {\n                    options.map((element) => {\n                        return <ListItem key={element}>\n                            {this.showButtonForAction(element)}\n                        </ListItem>\n                    })\n                }\n            </List>\n            <Divider />\n            <RaiseDialog \n                username={username}\n                bank={bank}\n                room={room}\n                socket={socket}\n                open={showRaiseDialog}\n                onClose={(value) => this.handleClose(value)}\n                currentContribution={currentContribution}\n                minBet={minBet}\n                maxBet={maxBet}\n            />\n            {this.showCurrentHand()}\n            <h3>Pot: {pot}</h3>\n            <h3>Your Current Contribution: {currentContribution}</h3>\n            <h3>Highest Contribution: {highestCurrentContribution}</h3>\n        </div>\n    }\n}\n\n\nconst InGameDashboard = connect(mapStateToProps)(ConnectedInGameDashboard);\n\nexport default InGameDashboard;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport mapStateToProps from './js/utils/mapStateToProps';\nimport { List, ListItem, Input } from '@material-ui/core';\n\nclass ConnectedChatComponent extends Component {\n    \n    MAX_MESSAGES = 500;\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            messages: [],\n            message: ''\n        }\n    }\n\n    componentDidMount() {\n        this.defineHandlers();\n    }\n\n    defineHandlers() {\n        const { socket } = this.props;\n        socket.on('chat message', (data) => {\n            this.setState(state => {\n                let messages = state.messages.concat(data);\n                if (messages.length > this.MAX_MESSAGES) {\n                    messages = messages.slice(messages.length() - this.MAX_MESSAGES)\n                }\n                return {\n                    messages\n                }\n            });\n        });\n    }\n\n    renderMessage(element) {\n        return <li><p><b>{element.username + \": \"}</b>{element.message}</p></li>\n    }\n\n    handleMessageChange(e) {\n        this.setState({\n            message: e.target.value\n        })\n    }\n\n    onFormSubmit(e) {\n        e.preventDefault()\n        const { message } = this.state;\n        const { socket, username, room } = this.props;\n\n        if (message != \"\") {\n            socket.emit('chat message', {\n                room: room,\n                message: message,\n                username: username\n            });\n            this.setState({\n                message: ''\n            })\n        }\n    }\n\n    render() {\n        const { messages, message } = this.state;\n\n        return <div>\n            <ul>\n                {\n                    messages.map((x, i) => this.renderMessage(x, i))\n                }\n            </ul>\n            \n            <form onSubmit={(e) => this.onFormSubmit(e)}>\n                <Input \n                    label=\"Chat\"\n                    value={message}\n                    onChange={(v) => this.handleMessageChange(v)}\n                />\n            </form>\n\n        </div>\n    }\n\n}\n\nconst ChatComponent = connect(mapStateToProps)(ConnectedChatComponent);\n\nexport default ChatComponent;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, List, ListItem, ListItemText, Divider } from '@material-ui/core';\nimport JoinDialog from './JoinDialog';\nimport InGameDashboard from './InGameDashboard';\nimport mapStateToProps from './js/utils/mapStateToProps';\nimport ChatComponent from './ChatComponent';\n\nclass ConnectedPreGameDashboard extends Component {\n    constructor(props) {\n        super(props);\n\n\t\tlet isOwner = false;\n\t\tlet isJoined = false;\n\t\tlet username = \"\";\n\t\tlet bank = 0;\n\n        if (this.props.location && this.props.location.state && this.props.location.state.isOwner) {\n\t\t\tisOwner = true;\n\t\t\tisJoined = true;\n\t\t\tusername = this.props.location.state.username;\n\t\t\tbank = this.props.location.state.bank;\n        }\n\n        this.state = {\n\t\t\tisOwner: isOwner,\n\t\t\tisJoined: isJoined,\n\t\t\tisRequested: false,\n\t\t\tshowJoinDialog: false,\n\t\t\tinitialLoad: false,\n\t\t\tjoinedPlayers: [],\n\t\t\tjoinRequests: [],\n\t\t\tstartGame: false,\n\t\t\tusername: username,\n\t\t\tbank: bank,\n\t\t\tusernameError: false,\n\t\t\tcurrState: null,\n\t\t\t// pendingStandUp: false,\n\t\t\t// pendingSitDown: false,\n\t\t\t// isStoodUp: false\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.defineHandlers()\n\t\tthis.loadUsers();\n\t}\n\n\tdefineHandlers() {\n\t\tconst { socket } = this.props;\n\t\tsocket.on('join request', (data) => {\n\t\t\tthis.setState((state) => {\n\t\t\t\tconst joinRequests = state.joinRequests.concat(data)\n\t\t\t\treturn {\n\t\t\t\t\tjoinRequests\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tsocket.on('user joined', (data) => {\n\t\t\tthis.setState((state) => {\n\t\t\t\tconst joinedPlayers = state.joinedPlayers.concat(data);\n\t\t\t\treturn {\n\t\t\t\t\tjoinedPlayers,\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tsocket.on('game info', (data) => {\n\t\t\tlet currState = null;\n\t\t\tif (data['started']) {\n\t\t\t\tcurrState = {\n\t\t\t\t\tcommunityCards: data['community_cards'],\n\t\t\t\t\tpot: data['pot'],\n\t\t\t\t\thighestCurrentContribution: data['highest_current_contribution']\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tjoinedPlayers: data['players'],\n\t\t\t\tstartGame: data['started'],\n\t\t\t\tcurrState: currState\n\t\t\t});\n\t\t});\n\t\tsocket.on('game start', () => {\n\t\t\tthis.setState({startGame: true});\n\t\t});\n\t\tsocket.on('duplicate username', () => {\n\t\t\tthis.setState({isRequested: false, usernameError: true})\n\t\t});\n\t\tsocket.on('request response', (data) => {\n\t\t\tif (data['approve']) {\n                this.setState({\n\t\t\t\t\tisRequested: false, \n\t\t\t\t\tusernameError: false, \n\t\t\t\t\tisJoined: true,\n\t\t\t\t\tusername: data['username'],\n\t\t\t\t\tbank: data['bank']\n\t\t\t\t});\n\t\t\t} else {\n                this.setState({isRequested: false});\n\t\t\t}\n\t\t});\n\t}\n\t\n\tloadUsers() {\n\t\tconst { socket } = this.props;\n\t\tconst { id } = this.props.match.params;\n\n\t\tsocket.emit('game info', {room: id});\n\t}\n\n    showStartButton() {\n        const { isOwner, joinedPlayers } = this.state;\n\n\t\tif (isOwner && joinedPlayers.length >= 2) {\n\t\t\treturn <Button variant=\"contained\" onClick={() => this.startGame()}>Start Game</Button>;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tshowJoinedPlayers() {\n\t\tconst { joinedPlayers } = this.state;\n\n\t\treturn <List>\n\t\t\t{\n\t\t\t\tjoinedPlayers.map((element) => {\n\t\t\t\t\treturn <ListItem key={element['username']}>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<ListItemText>{element['username']}</ListItemText>\n\t\t\t\t\t\t\t<ListItemText>{element['bank']}</ListItemText>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ListItem>\n\t\t\t\t})\n\t\t\t}\n\t\t</List>\n\t}\n\n\tshowRequests() {\n        const { isOwner, joinRequests } = this.state;\n\n\n\t\tif (isOwner) {\n\t\t\treturn <List>\n\t\t\t\t{\n\t\t\t\t\tjoinRequests.map((element) => {\n\t\t\t\t\t\treturn <ListItem key={element['username']}>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<ListItemText>{element['username']}</ListItemText>\n\t\t\t\t\t\t\t\t<ListItemText>{element['bank']}</ListItemText>\n\t\t\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={() => {this.handleRequest(element, true)}}>Approve</Button>\n\t\t\t\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={() =>{this.handleRequest(element, false)}}>Reject</Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t})\n\t\t\t\t}\n     \t\t</List>\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\thandleRequest = (element, decision) => {\n\t\tconst { socket } = this.props;\n\t\tconst { id } = this.props.match.params;\n\t\tconst data = {\n\t\t\tusername: element['username'],\n\t\t\tbank: element['bank'],\n\t\t\trequest_sid: element['request_sid'],\n\t\t\tapprove: decision,\n\t\t\troom: id\n\t\t}\n\t\tthis.setState(state => {\n\t\t\tconst joinRequests = state.joinRequests.filter(x => x['username'] != data['username']);\n\t\t\treturn {\n\t\t\t\tjoinRequests\n\t\t\t}\n\t\t})\n\t\tsocket.emit('handle join request', data);\n\t}\n\n\tshowJoinButton() {\n\t\tconst { isJoined, isRequested } = this.state;\n\n\t\tif (!isJoined && !isRequested) {\n\t\t\treturn <Button variant=\"contained\" onClick={() => this.joinGame()}>Join Game</Button>;\n\t\t} else if (!isJoined && isRequested) {\n\t\t\treturn <Button variant=\"contained\" onClick={() => this.joinGame()} disabled={true}>Requested...</Button>;\n\t\t}\n\t\treturn null;\n\t}\n\n\tjoinGame() {\n\t\tthis.setState({showJoinDialog: true})\n\t}\n\n\thandleClose = (value) => {\n\t\tthis.setState({\n\t\t\tshowJoinDialog: false, \n\t\t\tisRequested: value\n\t\t});\n\t\t// if (value) {\n\t\t// \tupdate['username'] = newUsername\n\t\t// \tupdate['bank'] = newBank\n\t\t// } else if (newUsername) {\n\t\t// \tthis.setState({\n\t\t// \t\tisRequested: true\n\t\t// \t})\n\t\t// }\n\t\t// console.log(this.state)\n\t\t// console.log(update)\n        // this.setState(update);\n    }\n\n\tstartGame() {\n\t\tconst { socket } = this.props;\n\t\tconst { id } = this.props.match.params;\n\n\t\tsocket.emit('start', {room: id});\n\t}\n\n\tshowChatRoom() {\n\t\tconst { isJoined, username } = this.state;\n\t\tconst { id } = this.props.match.params;\n\n\t\tif (isJoined) {\n\t\t\treturn <ChatComponent username={username} room={id} />\n\t\t}\n\t}\n\n\t// showStandUpToggleButton() {\n\t// \tconst { startGame, pendingStandUp, isStoodUp } = this.state;\n\t// \tif (startGame && (pendingStandUp || isStoodUp)) {\n\t// \t\treturn <Button \n\t// \t\tvariant=\"contained\" \n\t// \t\ttype=\"submit\" \n\t// \t\tonClick={() => this.toggleStandUp()}>Sit Down</Button>\n\t// \t} else if (startGame) {\n\t// \t\treturn <Button \n\t// \t\t\tvariant=\"contained\" \n\t// \t\t\ttype=\"submit\" \n\t// \t\t\tonClick={() => this.toggleStandUp()}>Stand Up</Button>\n\t// \t}\n\t// }\n\n\t// standUp() {\n\n\t// }\n\n\trender() {\n\t\tconst { \n\t\t\tshowJoinDialog, \n\t\t\tstartGame, \n\t\t\tjoinedPlayers,\n\t\t\tusername,\n\t\t\tbank,\n\t\t\tcurrState \n\t\t} = this.state;\n\t\tconst { socket } = this.props;\n\t\tconst { id } = this.props.match.params;\n        const connectingView = <h3>Connecting...</h3>\n        if (socket == null) {\n            return connectingView;\n        }\n        const preGame = (\n\t\t\t<div>\n\t\t\t\t{/* {this.showStandUpToggleButton()} */}\n\t\t\t\t{this.showStartButton()}\n\t\t\t\t{this.showJoinButton()}\n\t\t\t\t{this.showRequests()}\n\t\t\t\t<Divider />\n\t\t\t\t{this.showJoinedPlayers()}\n\t\t\t\t<JoinDialog \n\t\t\t\t\topen={showJoinDialog}\n\t\t\t\t\troom={id}\n\t\t\t\t\tonClose={this.handleClose}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t\tconst inGame = <InGameDashboard \n\t\t\t\t\t\t\tcurrState={currState}\n\t\t\t\t\t\t\troom={id} \n\t\t\t\t\t\t\tplayers={joinedPlayers}\n\t\t\t\t\t\t\tusername={username}\n\t\t\t\t\t\t\tbank={bank}\n        \t\t\t\t/>\n\n\t\tconst show = startGame ? inGame : preGame;\n\n\t\treturn <div>\n\t\t\t{this.showChatRoom()}\n\t\t\t{show}\n\t\t</div>\n\t}\n}\n\nconst PreGameDashboard = connect(mapStateToProps)(ConnectedPreGameDashboard);\n\nexport default PreGameDashboard;","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport Home from './Home';\nimport PreGameDashboard from './PreGameDashboard';\nimport io from 'socket.io-client';\nimport { setSocket } from './js/actions/index';\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setSocket: socket => dispatch(setSocket(socket))\n  };\n}\n\nclass ConnectedApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      socket: null\n    }\n  }\n\n  componentDidMount() {\n    const socket = io({transports: ['websocket']});\n    this.props.setSocket(socket);\n    this.setState({\n      socket: socket\n    })\n  }\n\n  render() {\n    const { socket } = this.state;\n\n    if (!socket) {\n      return <h3>Connecting...</h3>\n    }\n\n    return (\n      <Router>\n        <Switch>\n          <Route \n            path=\"/:id\" \n            render={(props) => <PreGameDashboard {...props} />}>\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nconst App = connect(null, mapDispatchToProps)(ConnectedApp);\n\nexport default App;\n","import { SET_SOCKET } from '../constants/action-types';\n\nexport function setSocket(payload) {\n    return {\n        type: SET_SOCKET, \n        payload\n    }\n};","export const SET_SOCKET = \"SET_SOCKET\";\nexport const SET_OWNER = \"SET_OWNER\";\nexport const ADD_JOIN_REQUEST = \"ADD_JOIN_REQUEST\";\nexport const ADD_JOINED_PLAYER = \"ADD_JOINED_PLAYER\";\nexport const SET_JOINED_PLAYERS = \"SET_JOINED_PLAYERS\";\nexport const SET_GAME_START = \"SET_GAME_START\";\nexport const REMOVE_JOIN_REQUEST = \"REMOVE_JOIN_REQUEST\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n  SET_SOCKET, \n  SET_OWNER, \n  ADD_JOIN_REQUEST, \n  ADD_JOINED_PLAYER,\n  SET_JOINED_PLAYERS,\n  SET_GAME_START,\n  REMOVE_JOIN_REQUEST\n} from \"../constants/action-types\";\n\nconst initialState = {\n    socket: undefined,\n    // owner: undefined,\n    // joinRequests: [],\n    // joinedPlayers: [],\n    // startGame: false\n  };\n  \n  function rootReducer(state = initialState, action) {\n    if (action.type == SET_SOCKET) {\n      return Object.assign({}, state, {\n        socket: action.payload\n      });\n    // } else if (action.type == SET_OWNER) {\n    //   return Object.assign({}, state, {\n    //     owner: action.payload\n    //   });\n    // } else if (action.type == ADD_JOINED_PLAYER) {\n    //   return Object.assign({}, state, {\n    //     joinedPlayers: state.joinedPlayers.concat(action.payload)\n    //   });\n    // } else if (action.type == ADD_JOIN_REQUEST) {\n    //   return Object.assign({}, state, {\n    //     joinRequests: state.joinRequests.concat(action.payload)\n    //   });\n    // } else if (action.type == SET_JOINED_PLAYERS) {\n    //   return Object.assign({}, state, {\n    //     joinedPlayers: action.payload['players']\n    //   })\n    // } else if (action.type == SET_GAME_START) {\n    //   return Object.assign({}, state, {\n    //     startGame: action.payload\n    //   });\n    // } else if (action.type == REMOVE_JOIN_REQUEST) {\n    //   return Object.assign({}, state, {\n    //     joinRequests: state.joinRequests.filter(x => x['username'] != action.payload['username'])\n    //   });\n    }\n    return state;\n  };\n  \n  export default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './js/reducers';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}